---
- name: Deployment Config 
  hosts: localhost
  connection: local
  collections:
    - community.kubernetes
    - community.okd
    - community.okd.k8s

  vars:
    deployment_environment: "development"
    app_debug: true
    app_name: "testing-namespace"
    context_dir: ""
    source_repository_url: "https://github.com/lutfi-ingram/laravelJenkins.git"
    source_repository_ref: "development"
    php_version: "7.4-ubi8"
    composer_mirror: ""
    app_domain: ""

  tasks:
    - name: Create a k8s namespace
      k8s:
        name: "{{ app_name }}"
        api_version: v1
        kind: Namespace
        state: present    
    - name: Create a new Service
      k8s:
        state: present
        namespace: "{{ app_name }}"
        resource_definition: |
          kind: Service
          apiVersion: v1
          metadata:
            name: "{{ app_name }}"
            annotations:
              description: Exposes and load balances the application pods
          spec:
            ports:
            - name: web
              port: 8080
              targetPort: 8080
            selector:
              name: "{{ app_name }}"

    - name: Create a new Route
      k8s:
        state: present
        namespace: "{{ app_name }}"
        resource_definition: |
          kind: Route
          apiVersion: v1
          metadata:
            name: "{{ app_name }}"
          spec:
            host: "{{ app_domain }}"
            to:
              kind: Service
              name: "{{ app_name }}"

    - name: Create a new ImageStream
      k8s:
        state: present
        namespace: "{{ app_name }}"
        resource_definition: |
          kind: ImageStream
          apiVersion: v1
          metadata:
            name: "{{ app_name }}"
            annotations:
              description: Keeps track of changes in the application image

    - name: Create a new Build
      k8s:
        state: present
        namespace: "{{ app_name }}"
        resource_definition: |
          kind: BuildConfig
          apiVersion: v1
          metadata:
            name: "{{ app_name }}"
            annotations:
              description: Defines how to build the application
              template.alpha.openshift.io/wait-for-ready: 'true'
          spec:
            source:
              contextDir: "{{ context_dir }}"
              type: Git
              git:
                uri: "{{ source_repository_url }}"
                ref: "{{ source_repository_ref }}"
            strategy:
              type: Source
              sourceStrategy:
                from:
                  kind: ImageStreamTag
                  namespace: "openshift"
                  name: php:{{ php_version }}
                env:
                - name: COMPOSER_MIRROR
                  value: "{{ composer_mirror }}"
            output:
              to:
                kind: ImageStreamTag
                name: "{{ app_name }}:latest"
            triggers:
            - type: ImageChange
            - type: ConfigChange
            - github:
                secret: "{{ lookup('password', '/tmp/passwordfile length=40 chars=digits') }}"
              type: GitHub

    - name: Create a new Deployment Config
      k8s:
        state: present
        namespace: "{{ app_name }}"
        resource_definition: |
          kind: DeploymentConfig
          apiVersion: v1
          metadata:
            name: "{{ app_name }}"
            annotations:
              description: Defines how to deploy the application server
              template.alpha.openshift.io/wait-for-ready: 'true'
          spec:
            strategy:
              type: Rolling
              rollingParams:
                updatePeriodSeconds: 1
                intervalSeconds: 1
                timeoutSeconds: 120
                maxSurge: 20%
                maxUnavailable: 50%
                pre:
                  execNewPod:
                    command:
                    - "./migrate-database.sh"
                    containerName: "{{ app_name }}"
                  failurePolicy: Retry
            triggers:
            - imageChangeParams:
                automatic: true
                containerNames:
                - "{{ app_name }}"
                from:
                  kind: ImageStreamTag
                  name: "{{ app_name }}:latest"
              type: ImageChange
            - type: ConfigChange
            replicas: 1
            selector:
              name: "{{ app_name }}"
            template:
              metadata:
                name: "{{ app_name }}"
                labels:
                  name: "{{ app_name }}"
              spec:
                containers:
                - name: "{{ app_name }}"
                  image: " "
                  ports:
                  - containerPort: 8080
                  readinessProbe:
                    httpGet:
                      path: "/health.php"
                      port: 8080
                    initialDelaySeconds: 3
                    timeoutSeconds: 3
                  livenessProbe:
                    httpGet:
                      path: "/"
                      port: 8080
                    initialDelaySeconds: 30
                    timeoutSeconds: 3
                  env:
                  - name: ROUTER_SHARD
                    value: "44fs"
                  - name: DB_CONNECTION
                    value: "sqlite"
                  - name: APP_KEY
                    value: "{{ lookup('password', '/dev/null chars=ascii_letters,digits,punctuation length=32') }}"
                  - name: APP_ENV
                    value: "{{ deployment_environment }}"
                  - name: APP_DEBUG
                    value: "{{ app_debug }}"
                  - name: OPCACHE_REVALIDATE_FREQ
                    value: "0"
                  resources:
                    limits:
                      memory: "512Mi"

        wait: yes
      register: vote_ui_dev_deployment
    
 
    # - name: Create a k8s namespace
    #   community.okd.k8s:
    #     name: testing-okd
    #     api_version: v1
    #     kind: Namespace
    #     state: present    

    - name: Get the Deployment
      k8s_info:
        kind: DeploymentConfig
        namespace: pipeline-tutorial
      register: funstuff_deployments_list
    - name: Log Deployment Details
      debug:
        msg: "{{ item | json_query('metadata.name') }}"
      loop: "{{funstuff_deployments_list.resources}}"
      loop_control:
        label: "Deployment (Namespace: {{item | json_query('metadata.namespace')}},Replicas:{{ item | json_query('spec.replicas')}})"


